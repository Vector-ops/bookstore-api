// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id       String @id @default(cuid())
  name     String
  username String @unique
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BorrowBook BorrowBook[]
  SellBook   SellBook[]
}

model Book {
  id     String @id @default(cuid())
  title  String
  author String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  borrowed  Boolean @default(false)
  buyable   Boolean @default(false)
  available Boolean @default(true)

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId String?

  BorrowBook BorrowBook[]
  SellBook   SellBook?

  BookPrice BookPrice @relation(fields: [bookId], references: [id])
  bookId    String    @unique

  @@index([sectionId])
}

model Section {
  id    String @id @default(cuid())
  type  String @unique
  books Book[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookPrice {
  id String @id @default(cuid())

  book Book?

  buyingPrice  Float
  sellingPrice Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellBook {
  id String @id @default(cuid())

  book    Book   @relation(fields: [bookId], references: [id])
  bookId  String @unique
  buyer   User   @relation(fields: [buyerId], references: [id])
  buyerId String

  price Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  soldAt    DateTime?

  @@index([bookId])
  @@index([buyerId])
}

model BorrowBook {
  id String @id @default(cuid())

  book   Book   @relation(fields: [bookId], references: [id])
  bookId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  borrowedAt DateTime?
  returnedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([bookId])
}
